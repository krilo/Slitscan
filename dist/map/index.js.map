{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/index.js","src/js/slitscan/MaskCanvas.js","src/js/slitscan/SlitscanApp.js"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nimport SlitscanApp from './slitscan/SlitscanApp';\n\n(function(){\n  const App = new SlitscanApp({el: document.querySelector('#app')})\n})()\n","class MaskCanvas {\n  constructor(){\n    this.canvas = document.querySelector('#mask') || document.createElement('canvas')\n    this.canvas.setAttribute('id', 'mask')\n    this.canvas.width = window.innerWidth\n    this.canvas.height = window.innerHeight\n    this.ctx = this.canvas.getContext('2d')\n    this.ctx.fillStyle = \"rgba(255, 255, 255, 1)\";\n    this.ctx.fillRect(0, 0, window.innerWidth, window.innerHeight)\n\n    for (var i = 0; i < 60; i++) {\n      let size = 200;\n      let pos = {x: Math.random()*(window.innerWidth - size), y: Math.random()*(window.innerHeight - size)}\n      let gradient = this.ctx.createRadialGradient(pos.x + size/2, pos.y + size/2, size/2, pos.x + size/2, pos.y + size/2, 0);\n      gradient.addColorStop(0, `rgba(0,0,0,0)`);\n      gradient.addColorStop(1, `rgba(255,255,255,1)`);\n      this.ctx.fillStyle = gradient;\n      this.ctx.fillRect(pos.x, pos.y,size,size);\n    }\n\n    this.canvas.setAttribute('id', 'mask')\n    document.body.appendChild(this.canvas)\n  }\n\n  render() {\n\n  }\n\n}\n\nmodule.exports = MaskCanvas;\n","import MaskCanvas from './MaskCanvas';\n\nclass SlitscanApp {\n  constructor(options){\n    this.el = options.el;\n\n    // Add Events\n    this.initScene()\n    this.resize()\n\n  }\n\n  initScene(){\n\n    this.camera = new THREE.Camera( )\n    this.camera.position.z = 1\n    this.scene = new THREE.Scene();\n\n    this.maskCanvas = new MaskCanvas();\n\n    // Buffer\n    let buffers = []\n    let currentBuffer = 0;\n    let numBuffers = 8;\n    let bufferContainer = document.querySelector('.buffers-container')\n    let bufferWidth = 512\n    let bufferHeight = 512\n\n    const getTexture = (canvas) => {\n      let image = new Image();\n      image.src = canvas.toDataURL('image/png');\n      let texture = new THREE.Texture();\n      texture.image = image;\n      texture.magFilter = THREE.LinearFilter;\n      texture.minFilter = THREE.LinearFilter;\n\n      image.onload = () => {\n        texture.needsUpdate = true;\n      };\n\n      return texture\n    }\n\n    /**\n     * Create Buffers\n     */\n\n    let bufferCanvas = document.createElement('canvas')\n    bufferCanvas.width = bufferWidth*numBuffers\n    bufferCanvas.height = bufferHeight;\n    let bufferCtx = bufferCanvas.getContext('2d')\n    let numCol = 0;\n\n    for (var i = 0; i < numBuffers; i++) {\n      let grad= bufferCtx.createLinearGradient(0, 0, bufferWidth, 0);\n      grad.addColorStop(0, `rgb(${Math.round(Math.random()*255)}, ${Math.round(Math.random()*255)}, ${Math.round(Math.random()*255)})`);\n      grad.addColorStop(1, `rgb(${Math.round(Math.random()*255)}, ${Math.round(Math.random()*255)}, ${Math.round(Math.random()*255)})`);\n      bufferCtx.fillStyle = grad;\n\n      numCol++;\n      bufferCtx.fillRect(bufferWidth*i, 0, bufferWidth, bufferHeight)\n      bufferContainer.appendChild(bufferCanvas)\n    }\n\n    /**\n     * Create Mask\n     */\n\n    this.renderer = new THREE.WebGLRenderer( { alpha: true, antialias: true })\n    this.renderer.sortObjects = false;\n\n    this.renderer.setPixelRatio(window.devicePixelRatio)\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n    this.el.appendChild(this.renderer.domElement)\n\n    let bufferArray = []\n    for (var i = 0; i < buffers.length; i++) {\n      bufferArray[i] = getTexture(buffers[i])\n    }\n\n    let geometry = new THREE.PlaneBufferGeometry(2, 2)\n    let uniforms = {\n      time:             { type: \"f\", value: 1.0 },\n      resolution:       { type: \"v2\", value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n      mask:             { type: \"t\", value: getTexture(this.maskCanvas.canvas)},\n      numBuffers:       { type: \"f\", value: numBuffers},\n      buffer:           { type: \"t\", value: getTexture(bufferCanvas)},\n      spriteSize:       { type: \"v2\", value: new THREE.Vector2(bufferWidth*numBuffers, bufferWidth) },\n      tileSize:         { type: \"v2\", value: new THREE.Vector2(bufferWidth, bufferHeight) }\n    }\n\n    let vertexShader = `\n      void main()\t{\n        gl_Position = vec4( position, 1.0 );\n      }`;\n\n    let fragmentShader = `\n      uniform float time;\n      uniform float numBuffers;\n      uniform vec2 resolution;\n      uniform float buffersPerRow;\n\n      uniform sampler2D mask;\n      uniform sampler2D buffer;\n\n      uniform vec2 spriteSize;\n      uniform vec2 tileSize;\n\n      // Spritesheets\n      vec4 drawSprite (vec2 p) {\n\n        vec4 maskPixel = texture2D(mask, p);\n        float brightness = distance(maskPixel, vec4(0.0, 0.0, 0.0, 1.0));\n        float arrayIndex = floor((brightness/2.)*numBuffers);\n        ivec2 tile = ivec2(arrayIndex, 0);\n\n        vec2 absP = p*resolution.xy;\n        vec2 tileRatio = tileSize/spriteSize;\n        vec2 tilePosition = vec2(tile)*tileRatio;\n        return texture2D(buffer, p*tileRatio+tilePosition);\n      }\n\n      void main() {\n        vec2 p = ( gl_FragCoord.xy / resolution.xy );\n        gl_FragColor = drawSprite(p);\n      }`;\n\n    let material = new THREE.ShaderMaterial( {\n      uniforms: uniforms,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    });\n\n    let mesh = new THREE.Mesh(geometry, material)\n    this.scene.add(mesh)\n\n    const render = () => {\n\n      /*maskIndex++;\n      if(maskIndex > 100){\n        maskIndex = 0;\n      }\n      maskCanvas = getMask(maskIndex/100,1)\n      let maskTexture = getTexture(maskCanvas);\n      maskTexture.needsUpdate = true*/\n\n      uniforms.time.value += 0.005;\n      //uniforms.mask.value = maskTexture\n\n      this.renderer.render( this.scene, this.camera );\n      requestAnimationFrame( render.bind(this) );\n    }\n\n    render()\n  }\n\n\n  resize(){\n    //this.el.width = window.innerWidth;\n    //this.el.height = window.innerHeight;\n    //this.renderer.setSize( this.el.offsetWidth, this.el.offsetHeight );\n  }\n}\n\nmodule.exports = SlitscanApp;\n"]}